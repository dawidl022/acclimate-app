<!DOCTYPE html>
<html>
  <head>
    <title>AcclimateApp</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <%= yield %>
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
    <script>
      let map;
      let companyDescriptions = {};

      function initMap() {
        <% if @lat %>
        // TODO move location request into client side
        const location = new google.maps.LatLng(<%= @lat %>, <%= @long %>)

        map = new google.maps.Map(document.getElementById("map"), {
          center: location,
          // TODO make sure radius is not negative on server!
          zoom: Math.ceil(14 - Math.log2(<%= @radius.to_f %>)),
          mapTypeControl: false,
        });
        <% end %>
      }

      function getCompanies() {
        // TODO find better way of selecting the data, preferbly receive via
        // ajax
        return Array.from(document.querySelectorAll(".company-name"))
          .map(element => [
              element.textContent,
              element.parentNode.querySelector(".company-rating").textContent,
              element.parentNode.querySelector(".company-description").textContent
          ]);
      }

      function callback(results, status, comapnyName, rating) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
          for (let i = 0; i < results.length; i++) {
            createMarker(results[i], comapnyName, rating);
          }
        }
      }

      function createMarker(place, comapnyName, rating) {
        if (!place.geometry || !place.geometry.location) return;

        const marker = new google.maps.Marker({
          map,
          position: place.geometry.location,
          title: comapnyName,
          label: rating,
        });

        google.maps.event.addListener(marker, "click", e => {
          const mapOverlay = document.querySelector(".map-overlay");
          // const rect = e.domEvent.target.getBoundingClientRect();
          mapOverlay.classList.remove("hidden");
          mapOverlay.style.left = `${e.domEvent.pageX + 20}px`
          mapOverlay.style.top = `${e.domEvent.pageY - 150}px`
          const lat = e.latLng.lat();
          const lng = e.latLng.lng();
          mapOverlay.querySelector(".navigation-link")
            .setAttribute("href", `https://www.google.com/maps/dir/?api=1&destination=${lat}%2C${lng}`)
          mapOverlay.querySelector(".name").textContent = marker.title;
          mapOverlay.querySelector(".rating").textContent = "Overall climate rating: " +  marker.label;

          if (companyDescriptions[marker.title]) {
            mapOverlay.querySelector(".facts").innerHTML =
              companyDescriptions[marker.title].split("\n")
              .map(line => `<li>${line}</li>`).join("")
          } else {
            mapOverlay.querySelector(".facts").innerHTML = "";
          }
        });

        google.maps.event.addListener(map, "click", e => {
          const mapOverlay = document.querySelector(".map-overlay");
          mapOverlay.classList.add("hidden")
        });
      }


      window.addEventListener('load', () => {
        const locationInput = document.querySelector("#location");
        const autocomplete = new google.maps.places.Autocomplete(locationInput, {});

        <% if @lat %>
          const location = new google.maps.LatLng(<%= @lat %>, <%= @long %>)

          const companies = getCompanies();
          const service = new google.maps.places.PlacesService(map);

          companies.forEach(([company, rating, description]) => {
            companyDescriptions[company] = description;
            const request = {
              location: location,
              radius: <%= @radius.to_f * 1000 %>,
              name: company
            };
            service.nearbySearch(request, (result, status) => {
              callback(result, status, company, rating)
            });
          });
        <% end %>
      });

    </script>
    <script
      src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.gmaps_api_key%>&callback=initMap&libraries=places&v=weekly"
      async
    ></script>

    <%= debug(params) if Rails.env.development? %>
  </body>
</html>
